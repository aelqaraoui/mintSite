{"version":3,"sources":["main.gif","whitelist","Wallet.js","index.js"],"names":["web3","require","owner","whitelist","white","split","push","Wallet","props","state","isConnected","publicKey","mintsLeft","numberToMint","alreadySubmitted","isWhiteListed","connectPhantom","bind","updateMintsLeft","registerMint","mintNft","handleChange","handleSubmit","window","solana","connect","on","includes","toString","alert","setState","a","requestOptions","method","headers","body","JSON","stringify","address","fetch","then","response","json","data","console","log","mints_left","number","sign","num","signature","connection","Connection","clusterApiUrl","walletPublicKey","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","this","LAMPORTS_PER_SOL","getRecentBlockhash","blockhash","recentBlockhash","feePayer","signTransaction","signedTransaction","sendRawTransaction","serialize","addEventListener","event","target","value","location","reload","preventDefault","className","onSubmit","type","onChange","src","logo","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ba6cb0f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/main.7e4a9d5c.gif\";","export default __webpack_public_path__ + \"static/media/whitelist.79c49a30.bin\";","import React from 'react';\nimport logo from './main.gif';\nimport './index.css';\nimport './wallet.css';\nimport white from './whitelist';\nlet web3 = require('@solana/web3.js');\n\nconst CLUSTER = 'devnet';\nconst PRICE_PER_UNIT = 4;\nconst owner = \"CyBizpsEVPjycYiaCMaDQFkHJWrPZJsBYWeYTz3JYVPX\";\n\nlet whitelist = white.split('\\n');\nwhitelist.push(owner);\n\nclass Wallet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isConnected: false,\n            publicKey: \"\",\n            mintsLeft: null,\n            numberToMint: 1,\n            alreadySubmitted: false,\n            isWhiteListed: false,\n        };\n\n        this.connectPhantom = this.connectPhantom.bind(this);\n        this.updateMintsLeft = this.updateMintsLeft.bind(this);\n        this.registerMint = this.registerMint.bind(this);\n        this.mintNft = this.mintNft.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n    \n    connectPhantom(){\n        window.solana.connect();\n        window.solana.on(\"connect\", () => {\n            if(!whitelist.includes(window.solana.publicKey.toString()))\n            {\n                alert(\"You're not whitelisted sorry!\");\n            }\n            else \n            {\n                this.updateMintsLeft();\n            }\n            this.setState({\n                isConnected: true,\n                isWhiteListed: whitelist.includes(window.solana.publicKey.toString()),\n                publicKey: window.solana.publicKey.toString()\n            });\n        })\n    }\n\n    async updateMintsLeft()\n    {\n        const requestOptions = {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                address: window.solana.publicKey.toString()\n              })\n        };\n        fetch('https://147.182.184.234/getMintsLeft', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Holy shit\", data);\n                this.setState({\n                    mintsLeft: data.mints_left\n                });\n            });\n    }\n\n    async registerMint(number, sign)\n    {\n        const requestOptions = {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                num: number,\n                address: window.solana.publicKey.toString(),\n                signature: sign\n              })\n        };\n        fetch('https://147.182.184.234/registerMint', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n            });\n    }\n\n    async mintNft()\n    {\n\n        const connection = new web3.Connection(\n            web3.clusterApiUrl(CLUSTER),\n            'confirmed',\n        );\n\n        const walletPublicKey = window.solana.publicKey\n        \n        const to = owner;\n        \n        const transaction = new web3.Transaction().add(\n            web3.SystemProgram.transfer({\n              fromPubkey: walletPublicKey,\n              toPubkey: to,\n              lamports: this.state.numberToMint*PRICE_PER_UNIT*web3.LAMPORTS_PER_SOL,\n            }),\n          );\n\n        transaction.recentBlockhash = await (await connection.getRecentBlockhash()).blockhash;\n        transaction.feePayer = walletPublicKey\n        \n        const signedTransaction = await window.solana.signTransaction(transaction);\n        let signature = await connection.sendRawTransaction(signedTransaction.serialize());\n        \n        console.log('SIGNATURE', signature);\n\n        this.registerMint(this.state.numberToMint, signature);\n        this.updateMintsLeft();\n    \n    }\n\n    componentDidMount()\n    {\n        window.addEventListener('load', this.connectPhantom)\n    }\n\n    handleChange(event) {\n        if (!(event.target.value < 1 || event.target.value > this.state.mintsLeft))\n        {\n            this.setState({numberToMint: event.target.value});\n        }\n    }\n    \n    handleSubmit(event) {\n        if(!this.state.alreadySubmitted)\n        {\n            if(this.state.numberToMint > this.state.mintsLeft)\n            {\n                if(this.state.mintsLeft === 0)    alert('Sorry, your limit is already hit');\n                else    alert(`Please mint ${this.state.mintsLeft} NFTs or less`);\n            }\n            else\n            {\n                this.setState({alreadySubmitted: true})\n                this.mintNft().then(\n                    () => {\n                        alert('Thank you for being an early supporter');\n                        window.location.reload(false);\n                    }\n                );\n            }\n            this.setState({alreadySubmitted: false})\n        }\n        \n        event.preventDefault();\n    }\n\n    render(){\n        if(this.state.isConnected && this.state.isWhiteListed)\n        {    \n            return (\n                <div className=\"all\">\n                    <div className=\"col\">\n                        <h1 className=\"title\">Xperiment</h1>\n                        <p className=\"text\">Xperiment is a collection of frames from a generative art animation.<br/><br/>\n                            Each frame will be minted as an NFT.<br/><br/>\n                            The collectors can then merge the frames into a single video NFT.<br/><br/>\n                            The rarity is then defined by how many frames were merged into each single NFT.<br/><br/>\n                            Each merge makes all the remaining NFTs more and more valuable until there is only a 1 on 1 extremely rare NFT.<br/><br/><br/>\n\n                            Mint an NFT and let the games begin.<br/>\n                        </p>\n                        <form onSubmit={this.handleSubmit}>\n                            <label className=\"label\">Mint Left : {this.state.mintsLeft}</label> \n                            <input className=\"input\" type=\"number\" value={this.state.numberToMint} onChange={this.handleChange} />\n                            <input className=\"submitbtn\" type=\"submit\" value=\"Submit\" />\n                        </form>\n                    </div>\n                    <div className=\"col\">\n                        <img className=\"imgcol\" src={logo}/>\n                    </div>\n                </div>\n            );\n        }\n        else\n        {\n            return (\n                <div className=\"all\">\n                </div>\n            );\n        }\n    }\n};\n\nexport default Wallet;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Wallet from './Wallet';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wallet />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}